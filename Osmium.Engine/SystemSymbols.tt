<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

<#
	
	string[] Symbols = new string[] {
		"All", "Append", "Apply",
		"True", "False",
		"Symbol", "List", "Association",
		"Blank", "BlankSequence", "BlankNullSequence",
		"Pattern", "PatternTest",
		"Sequence",
		"Set", "SetDelayed", "UpSet", "UpSetDelayed", "TagSet", "TagSetDelayed",
		"Unset", "TagUnset",
		"Null", "String",
		"Integer", "Real", "Rational", "Complex",
		"Get", "Out", "Slot", "SlotSequence", "Optional",
		"MessageName", "Part",
		"Increment", "Decrement", "PreIncrement", "PreDecrement",
		"Composition", "RightComposition",
		"Map", "MapAll",
		"Factorial", "Factorial2", "Conjugate", "Transpose", "ConjugateTranspose",
		"Derivative", "StringJoin",
		"Times", "Plus", "PlusMinus", "MinusPlus", "Power",
		"Equal", "Unequal", "Greater", "GreaterEqual", "Less", "LessEqual", "Inequality",
		"SameQ", "UnsameQ",
		"Not", "Or", "And", 
		"Repeated", "RepeatedNull", "Alternatives",
		"StringExpression", "Condition", "TwoWayRule",
		"Rule", "DelayedRule",
		"ReplaceAll", "ReplaceRepeated",
		"AddTo", "SubtractFrom", "TimesBy", "DivideBy",
		"Function", "Put", "PutAppend", "CompoundExpression",
	};

	string Var(string name) => name.Replace("$", "S");

#>

namespace Osmium.Engine {
	
	partial class SystemSymbols {
		
		<# foreach (var symname in Symbols) { #>
			public Symbol <#= Var(symname) #> { get; }
		<# } #>

		public SystemSymbols(OsmiumEngine e) {
			<# foreach (var symname in Symbols) { #>
				<#= Var(symname) #> = e.GetSymbol("System`", "<#= symname #>");
			<# } #>

			Init();
		}
	}
}